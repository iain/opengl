#!/usr/bin/env ruby -I lib -w

require 'environment'

require 'models/spaceship'
require 'views/fuselage'

require 'socket'


class SpaceWars < Controller

  on "m" do
    new_matrix = $connection.request_matrix
    spaceship.set_matrix(new_matrix)
  end

  on "n" do
    $connection.puts "request: players"
    puts $connection.gets
  end

  on "w" do
    spaceship.pitch_down
  end

  on "s" do
    spaceship.pitch_up
  end

  on "a" do
    spaceship.roll_left
  end

  on "d" do
    spaceship.roll_right
  end

  on "z" do
    spaceship.yaw_left
  end

  on "c" do
    spaceship.yaw_right
  end

  on "x" do
    spaceship.reset_rotation
  end

  on '[' do
    spaceship.accelerate
  end

  on '\'' do
    spaceship.brake
  end

  on "=" do
    $camera.zoom_in
  end

  on "-" do
    $camera.zoom_out
  end

  on "h" do
    $camera.roll(-0.1)
  end

  on "j" do
    $camera.pitch( 0.1)
  end

  on "k" do
    $camera.pitch(-0.1)
  end

  on "l" do
    $camera.roll( 0.1)
  end

  on "f" do
    window.enter_full_screen
  end

  on "F" do
    window.leave_full_screen
  end

  on "q" do
    exit
  end

  on "b" do
    request_player_locations
  end

  def spaceship
    @spaceship ||= Spaceship.new
  end

  def get_player_locations
    $player_shuttlers.each do |id, player|
      new_matrix = $connection.get_player_location(id)
      player.class
      player.set_matrix(new_matrix)
    end
  end

  def update_player_list
    new_players = $connection.request_players_list - $player_shuttlers.map { |key, info| key.to_s } - [spaceship.name]

    new_players.each do |player|
      new_ship = Spaceship.new
      new_ship.name = player
      $player_shuttlers[player.to_sym] = new_ship
      window.views << Fuselage.new(new_ship)
    end
  end

  def on_tick
    spaceship.animate

    $player_shuttlers.each do |id, player|
      player.animate
    end

    if Time.now.to_f - $last_send > 0.1
      update_player_list
      get_player_locations
      spaceship.send_to_server!
      $last_send = Time.now.to_f
    end
  end

end

$last_send = Time.now.to_f

class Connection

  attr_accessor :socket

  def initialize *args
    @address, @port, @player_name = *args
    self.socket = TCPSocket.new(@address,@port)

    set_name(@player_name)
  end

  def send line
    p socket.class
    self.socket.puts line
  end

  def request line
    send line
    socket.gets
  end

  def set_name player_name
    send("set_name: #{player_name}")
  end

  def request_players_list
    eval(request("request: players"))
  end

  def send_matrix matrix
    send("matrix: #{matrix}")
  end

  def get_player_location id
    eval(request "get: #{id}")
  end

  def request_matrix
    request("request: matrix")
  end

end

space_wars = SpaceWars.new

window = Window.new(space_wars)

$camera = Camera.new(-2)

player_name = "Peter"
address = "localhost"
port = 31337

$connection = Connection.new(address,port,player_name)

window.views << CameraView.new($camera)
window.views << Fuselage.new(space_wars.spaceship)

space_wars.spaceship.name = player_name

players = $connection.request_players_list
$player_shuttlers = {}
players.delete(player_name)
players.each do |player|
  new_ship = Spaceship.new
  new_ship.name = player
  $player_shuttlers[player.to_sym] = new_ship
  window.views << Fuselage.new(new_ship)
end



window.start
